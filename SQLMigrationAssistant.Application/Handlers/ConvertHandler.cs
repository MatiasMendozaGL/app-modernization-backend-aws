using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using SQLMigrationAssistant.Application.Common.Exceptions;
using SQLMigrationAssistant.Application.Common.Interfaces;
using SQLMigrationAssistant.Application.DTOs;
using SQLMigrationAssistant.Domain.Common;
using SQLMigrationAssistant.Domain.Entities;
using SQLMigrationAssistant.Domain.Enums;
using SQLMigrationAssistant.Domain.Interfaces;
using System.Threading;

namespace SQLMigrationAssistant.Application.Handlers
{
    public class ConvertHandler : IRequestHandler<MigrateRequest, MigrationResponse>
    {
        private readonly ILLMServiceFactory _llmServiceFactory;
        private readonly IFileStorageService _fileStorageService;
        private readonly IFileContentReader _fileContentReader;
        private readonly IMigrationRepository<Migration> _migrationRepository;
        private readonly ICodeBlockProcessor _codeBlockProcessor;
        private readonly IMigrationService _migrationService;
        private readonly IMapper _mapper;
        private readonly ILogger<ConvertHandler> _logger;

        public ConvertHandler(
            ILLMServiceFactory llmServiceFactory,
            IFileStorageService fileStorageService,
            IFileContentReader fileContentReader,
            IMigrationRepository<Migration> migrationRepository,
            ICodeBlockProcessor codeBlockProcessor,
            IMigrationService migrationService,
            IMapper mapper,
            ILogger<ConvertHandler> logger)
        {
            _llmServiceFactory = llmServiceFactory;
            _fileStorageService = fileStorageService;
            _fileContentReader = fileContentReader;
            _migrationRepository = migrationRepository;
            _codeBlockProcessor = codeBlockProcessor;
            _migrationService = migrationService;
            _mapper = mapper;
            _logger = logger;
        }

        public async Task<MigrationResponse> Handle(MigrateRequest request, CancellationToken cancellationToken)
        {
            var migrationId = Guid.NewGuid().ToString();

            _logger.LogInformation("Starting conversion for user: {UserId}, Migration: {MigrationId}",
                    request.UserId, migrationId);

            try
            {
                var result = await ProcessMigrationAsync(request, migrationId, cancellationToken);
                _logger.LogInformation("Conversion completed successfully for migration: {MigrationId}", migrationId);
                return result.Response!;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Migration {MigrationId} failed for user {UserId}.", migrationId, request.UserId);
                await _migrationService.CleanupMigrationArtifactsAsync(request.UserId, migrationId);
                throw;
            }
        }

        private async Task<MigrationResult> ProcessMigrationAsync(MigrateRequest request, string migrationId, CancellationToken cancellationToken)
        {
            // Read and upload source file
            var fileContent = await _fileContentReader.ReadAsync(request.FileContent, cancellationToken);
            await UploadSourceFileAsync(migrationId, request, fileContent);

            // Get LLM service and convert
            var llmService = GetLLMService(request.LlmProvideType);
            var llmResponse = await ConvertWithLLMAsync(llmService, fileContent, request.TargetLanguage, migrationId, cancellationToken);

            // Process and upload generated code blocks
            var codeFileNames = await _codeBlockProcessor.ProcessCodeBlocksAsync(llmResponse.Output, request.UserId, migrationId, cancellationToken);

            if (codeFileNames == null || !codeFileNames.Any())
            {
                throw new MigrationException(migrationId, "Migration failed because no code files were generated by the LLM.");
            }

            // Create and save migration
            var migration = CreateMigration(migrationId, request);
            await _migrationRepository.SaveAsync(migration);

            var migrationResponse = _mapper.Map<MigrationResponse>(migration);
            migrationResponse.GeneratedCodeFiles = codeFileNames;

            return MigrationResult.Success(migrationResponse);
        }

        private async Task UploadSourceFileAsync(string migrationId, MigrateRequest request, string fileContent)
        {
            var sourceFileName = $"{request.UserId}/{migrationId}/source_{request.FileName}";
            await _fileStorageService.UploadFileAsync(fileContent, sourceFileName, request.FileContentType);
        }

        private ILLMService GetLLMService(LLMProviderType providerType)
        {
            var llmService = _llmServiceFactory.GetLLMService(providerType);
            if (llmService == null)
            {
                _logger.LogError("No LLM service found for type: {LLMModelType}", providerType);
                throw new InvalidOperationException($"No LLM service found for type: {providerType}");
            }
            return llmService;
        }

        private async Task<LLMResponse> ConvertWithLLMAsync(ILLMService llmService, string fileContent,
                                TargetLanguage targetLanguage, string migrationId, CancellationToken cancellationToken)
        {
            var llmResponse = await llmService.ConvertAsync(fileContent, Enum.GetName(typeof(TargetLanguage), targetLanguage), cancellationToken);

            if (!llmResponse.IsSuccess)
            {
                _logger.LogError("LLM conversion failed for migration {MigrationId}: {Error}",
                    migrationId, llmResponse.ErrorMessage);
                throw new InvalidOperationException("LLM conversion failed");
            }

            return llmResponse;
        }

        private static Migration CreateMigration(string migrationId, MigrateRequest request)
        {
            return new Migration
            {
                MigrationId = migrationId,
                SourceFileName = request.FileName,
                Status = MigrationStatus.Completed,
                LLMModel = request.LlmProvideType,
                UserId = request.UserId,
                TargetLanguage = request.TargetLanguage,
                LastMigrationExecution = DateTime.UtcNow.ToString("o")
            };
        }
    }
}